paths:
  /api/order:
    get:
      summary: 'Get orders'
      tags:
        - api
      responses:
        200:
          description: 'List of orders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderRes'

    post:
      summary: 'Save new order'
      tags:
        - api
      requestBody:
        $ref: '#/components/requestBody/order'
      responses:
        200:
          description: 'Order has been created'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Saved successfully.'
        400:
          description: 'Error message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'At least one cart item is required.'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Server error.'

  /api/order/{orderId}:
    delete:
      summary: 'Delete an order by ID'
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: ID of the order that is to be deleted.
      tags:
        - api
      responses:
        200:
          description: 'Order has been deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Deleted successfully.'
        404:
          description: 'Endpoint not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Order ID is not valid.'
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Server error.'

components:
  schemas:
    order:
      type: object
      properties:
        cart:
          type: array
          items:
            type: object
            properties:
              menuItemId:
                type: string
              quantity:               
                 type: number
      required:
        - menuItemId
        - quantity
        
    orderRes:
      type: object
      properties:
        orders:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              cart:
                type: array
                items:
                  type: object
                  properties:
                    menuItemId:
                      type: string
                    quantity:               
                      type: number

  requestBody:
    order:
      description: JSON object containing order schema
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order'